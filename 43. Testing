This problem is all about unit testing.Your company needs a function that meets the following requirements:
For a given array of n integers, the function returns the index of the element with the minimum value in the array. If there is more than one element 
with the minimum value, the returned index should be the smallest one.If an empty array is passed to the function, it should raise an Exception.
import java.util.*;

public class Solution {

    public static int minimum_index(int[] seq) {
        if (seq.length == 0) {
            throw new IllegalArgumentException("Cannot get the minimum value index from an empty sequence");
        }
        int min_idx = 0;
        for (int i = 1; i < seq.length; ++i) {
            if (seq[i] < seq[min_idx]) {
                min_idx = i;
            }
        }
        return min_idx;
    }

    static class TestDataEmptyArray {
        public static int[] get_array() {
            // complete this function
               int[] testDataEmptyArray = new int[0];
            return testDataEmptyArray;
        }
    }

    static class TestDataUniqueValues {
        public static int[] get_array() {
            // complete this function
             // complete this function
            int[] uniqueValueArr = new int[3];
            uniqueValueArr[0] = 1;
            uniqueValueArr[1] = 2;
            uniqueValueArr[2] = 3;
 
            return uniqueValueArr;
        }
        

        public static int get_expected_result() {
            // complete this function
             int[] arr = get_array();
            int minimum = minimum_index(arr);
 
            return minimum;
        }
}
        
    

    static class TestDataExactlyTwoDifferentMinimums {
        public static int[] get_array() {
            // complete this function
             // complete this function
            int[] differentMinimums = new int[2];
            differentMinimums[0] = 1;
            differentMinimums[1] = 1;
 
            return differentMinimums;
        }

        public static int get_expected_result() {
            // complete this function
              int[] arr = get_array();
            int result = minimum_index(arr);
 
            return result;
        }
        }
    

    
	public static void TestWithEmptyArray() {
        try {
            int[] seq = TestDataEmptyArray.get_array();
            int result = minimum_index(seq);
        } catch (IllegalArgumentException e) {
            return;
        }
        throw new AssertionError("Exception wasn't thrown as expected");
    }

    public static void TestWithUniqueValues() {
        int[] seq = TestDataUniqueValues.get_array();
        if (seq.length < 2) {
            throw new AssertionError("less than 2 elements in the array");
        }

        Integer[] tmp = new Integer[seq.length];
        for (int i = 0; i < seq.length; ++i) {
            tmp[i] = Integer.valueOf(seq[i]);
        }
        if (!((new LinkedHashSet<Integer>(Arrays.asList(tmp))).size() == seq.length)) {
            throw new AssertionError("not all values are unique");
        }

        int expected_result = TestDataUniqueValues.get_expected_result();
        int result = minimum_index(seq);
        if (result != expected_result) {
            throw new AssertionError("result is different than the expected result");
        }
    }

    public static void TestWithExactlyTwoDifferentMinimums() {
        int[] seq = TestDataExactlyTwoDifferentMinimums.get_array();
        if (seq.length < 2) {
            throw new AssertionError("less than 2 elements in the array");
        }

        int[] tmp = seq.clone();
        Arrays.sort(tmp);
        if (!(tmp[0] == tmp[1] && (tmp.length == 2 || tmp[1] < tmp[2]))) {
            throw new AssertionError("there are not exactly two minimums in the array");
        }

        int expected_result = TestDataExactlyTwoDifferentMinimums.get_expected_result();
        int result = minimum_index(seq);
        if (result != expected_result) {
            throw new AssertionError("result is different than the expected result");
        }
    }

    public static void main(String[] args) {
        TestWithEmptyArray();
        TestWithUniqueValues();
        TestWithExactlyTwoDifferentMinimums();
        System.out.println("OK");
    }
}
